# Generated by Django 3.0 on 2020-01-07 20:48

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'api_key',
            },
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'data_types',
            },
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'genomic_elements',
            },
        ),
        migrations.CreateModel(
            name='ElementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'genomic_elements_types',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('created', models.DateTimeField(verbose_name='%Y-%m-%d')),
            ],
            options={
                'db_table': 'experiments',
            },
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'genomes',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'group',
            },
        ),
        migrations.CreateModel(
            name='GroupPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'groups_persons',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'keywords',
            },
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('scientific_name', models.CharField(max_length=255)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'organisms',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255)),
                ('api_key', models.CharField(max_length=64)),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'persons',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('organism_id', models.IntegerField()),
                ('expression_type_id', models.IntegerField()),
                ('created', models.DateTimeField(verbose_name='%Y-%m-%d')),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
            ],
            options={
                'db_table': 'samples',
            },
        ),
        migrations.CreateModel(
            name='SampleFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'sample_files',
            },
        ),
        migrations.CreateModel(
            name='SampleGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'sample_groups',
            },
        ),
        migrations.CreateModel(
            name='SamplePerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'sample_persons',
            },
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'sets',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('alt_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='TagKeywordSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Keyword')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Tag')),
            ],
            options={
                'db_table': 'tags_keywords_search',
            },
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'tag_types',
            },
        ),
        migrations.CreateModel(
            name='TrackType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'ucsc_track_types',
            },
        ),
        migrations.CreateModel(
            name='VFSFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
                ('type_id', models.IntegerField()),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': 'vfs',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=255)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('track_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TrackType')),
            ],
            options={
                'db_table': 'ucsc_tracks',
            },
        ),
        migrations.CreateModel(
            name='TagSampleSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('tag_keyword_search', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TagKeywordSearch')),
            ],
            options={
                'db_table': 'tags_samples_search',
            },
        ),
        migrations.CreateModel(
            name='SetSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Set')),
            ],
            options={
                'db_table': 'sets_samples',
            },
        ),
        migrations.CreateModel(
            name='SampleTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('str_value', models.CharField(max_length=255)),
                ('int_value', models.IntegerField()),
                ('float_value', models.FloatField()),
                ('created', models.DateTimeField()),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Sample')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Tag')),
                ('tag_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TagType')),
            ],
            options={
                'db_table': 'sample_tags',
            },
        ),
    ]
